layout (local_size_x = 16, local_size_y = 16) in;

uniform vec2 viewportSize;

layout (rgba32f, binding = 0) readonly restrict uniform image2D input_image;
layout (rgba8, binding = 1) writeonly restrict uniform image2D output_image;

// layout (rgba32f, binding = 0) readonly restrict uniform sampler2D input_sampler;
uniform sampler2D input_sampler;

vec3 Tonemap_Uchimura(vec3 x, float P, float a, float m, float l, float c, float b) {
    // Uchimura 2017, "HDR theory and practice"
    // Math: https://www.desmos.com/calculator/gslcdxvipg
    // Source: https://www.slideshare.net/nikuque/hdr-theory-and-practicce-jp
    float l0 = ((P - m) * l) / a;
    float L0 = m - m / a;
    float L1 = m + (1.0 - m) / a;
    float S0 = m + l0;
    float S1 = m + a * l0;
    float C2 = (a * P) / (P - S1);
    float CP = -C2 / P;

    vec3 w0 = 1.0 - smoothstep(0.0, m, x);
    vec3 w2 = step(m + l0, x);
    vec3 w1 = 1.0 - w0 - w2;

    vec3 T = m * pow(x / m, vec3(c)) + b;
    vec3 S = P - (P - S1) * exp(CP * (x - S0));
    vec3 L = m + a * (x - m);

    return T * w0 + L * w1 + S * w2;
}

vec3 Tonemap_Uchimura(vec3 x) {
    const float P = 1.0;  // max display brightness
    const float a = 1.0;  // contrast
    const float m = 0.22; // linear section start
    const float l = 0.4;  // linear section length
    const float c = 1.33; // black
    const float b = 0.0;  // pedestal
    return Tonemap_Uchimura(x, P, a, m, l, c, b);
}

vec3 gamma_correct(vec3 v) {
    vec3 r;

    return pow(v, vec3(1.0 / 2.2));

    for (int i = 0; i < 3; ++i) {
        float f = v[i];
        if (f <= 0.0031308f) {
            r[i] = f * 12.92f;
        } else {
            r[i] = 1.055f * pow(f, 1.0f / 2.4f) - 0.055f;
        }
    }
    return r;
}

#if 1
const float kernel[49] = float[](
    0.000, 0.000, 0.001, 0.001, 0.001, 0.000, 0.000,
    0.000, 0.002, 0.012, 0.020, 0.012, 0.002, 0.000,
    0.001, 0.012, 0.068, 0.109, 0.068, 0.012, 0.001,
    0.001, 0.020, 0.109, 0.172, 0.109, 0.020, 0.001,
    0.001, 0.012, 0.068, 0.109, 0.068, 0.012, 0.001,
    0.000, 0.002, 0.012, 0.020, 0.012, 0.002, 0.000,
    0.000, 0.000, 0.001, 0.001, 0.001, 0.000, 0.000
);
#else
const float kernel[49] = float[](
    1./49, 1.0/49, 1.0/49, 1.0/49, 1.0/49, 1.0/49, 1.0/49,
    1./49, 1.0/49, 1.0/49, 1.0/49, 1.0/49, 1.0/49, 1.0/49,
    1./49, 1.0/49, 1.0/49, 1.0/49, 1.0/49, 1.0/49, 1.0/49,
    1./49, 1.0/49, 1.0/49, 1.0/49, 1.0/49, 1.0/49, 1.0/49,
    1./49, 1.0/49, 1.0/49, 1.0/49, 1.0/49, 1.0/49, 1.0/49,
    1./49, 1.0/49, 1.0/49, 1.0/49, 1.0/49, 1.0/49, 1.0/49,
    1./49, 1.0/49, 1.0/49, 1.0/49, 1.0/49, 1.0/49, 1.0/49
);
#endif
// const float kernel[7][7] = float[][](
//     float[](float(0.0), float(0.0), float(0.0), 0.0, 0.0, 0.0, 0.0),
//     float[](float(0.0), float(0.0), float(0.0), 0.0, 0.0, 0.0, 0.0),
//     float[](float(0.0), float(0.0), float(0.0), 0.0, 0.0, 0.0, 0.0),
//     float[](float(0.0), float(0.0), float(0.0), 0.0, 0.0, 0.0, 0.0),
//     float[](float(0.0), float(0.0), float(0.0), 0.0, 0.0, 0.0, 0.0),
//     float[](float(0.0), float(0.0), float(0.0), 0.0, 0.0, 0.0, 0.0),
//     float[](float(0.0), float(0.0), float(0.0), 0.0, 0.0, 0.0, 0.0),
// );

void main() {
    ivec2 texel = ivec2(gl_GlobalInvocationID.xy);

    const int windowSize = 15;
    vec3 blurColor = vec3(0.0);

    for (int x = texel.x - windowSize / 2, i = 0; x <= texel.x + windowSize / 2; x++, i++) {
        for (int y = texel.y - windowSize / 2, j = 0; y <= texel.y + windowSize / 2; y++, j++) {
            vec3 c = texture(input_sampler, vec2(x, y) / viewportSize).rgb;
            if (c.r > 1.0 || c.g > 1.0 || c.b > 1.0) {
                // float k = kernel[i * windowSize + j];
                float k = 1.0 / (windowSize * windowSize);
                blurColor += c * k;
            }
            // colorSum += texelFetch(input_image, ivec2(x, y), 0).rgb;
            // weightSum += 1.0;
        }
    }

    // vec3 color = colorSum / weightSum;
    vec3 color = imageLoad(input_image, texel).rgb;
    // vec3 color = texture(input_image, vec2(texel) / viewportSize).rgb;
    // color = vec3(0);
    // blurColor = vec3(0.0);

    color = Tonemap_Uchimura(color + blurColor);
    color = gamma_correct(color);

    // imageStore(imageOutput, pixelCoord, colorSum / weightSum);

    imageStore(output_image, texel, vec4(color, 1.0));
}